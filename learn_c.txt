(a good place to copy the baseline for K&R exercises from: https://github.com/caisah/K-and-R-exercises-and-examples)

automatic variables are local vars, that are created when the function is called, and destroyed when the function exits
  `static` makes such a variable keep its value between calls
global vars are _defined_ exactly once, outside of any function
  defining allocates storage for the var
global vars must be _declared_ in each function that want to access them
  can be explicit: extern char c;
  or implicit, if the global var is _defined_ in the source file before it's used
    common practice: put all definitions of global vars in headers
  if var is defined in another .c file, it must be declared `extern` explicitly
    functions define in another .c file must also be declared `extern`, but they're already that implicitly

variables shouldn't be named to start with `_`, as libraries use that convention
types:
  char // always a single byte
  int // natural size of integers in the host machine; at least 16 bits
  float // single precision float
  [long] double // double precision float
  short [int] // at least 16 bits
  long [int] // at least 32 bits
all the char and int types can be `unsigned`
float and double can have larger absolute values than integers, when both have the same number of bits, but with less precision
  http://stackoverflow.com/questions/11158476/why-do-float-and-int-have-such-different-maximum-values-even-though-theyre-the
  floats and doubles lose precision with large numbers even before the decimal point
constants/literals:
  1234 // int
  123456789l or 123456789L // long; literals too big to fit in an int are also implicitly long
  123456789u or 123456789U // unsigned
  123.4 // double
  1e-2 // double
  123.4f or 123.4F // float
  123.4l or 123.4L // long double
  01234 // octal, i.e. base-8
  0x1234 or 0X1234 // hex, i.e. base-16
  0xFUL // unsigned long with value 15 in decimal
  'a' // int
  '\123' // int from octal value
  '\x6F' // int from hex value
  "bla" // string literal with trailing '\0'
constant expressions contain only constants/literals, and can be eval'd at compile time
stdlib's strlen() (in string.h) returns the length _without_ the trailing '\0'
concatenation: "some string" "another string"
enum:
  enum boolean { NO, YES } // values 0 and 1
  enum chars { BELL = '\a', TAB = '\t', CHAR_A = 'a' }
  enum months { JAN = 1, FEB, MAR } // unspecified values continue counting up from the last specified value
  names in different enums must be distinct, but values don't, even in the same enum
  you use enums just like defines, but enums have the advantage of being checked at compile-time
  you can declare an enum type variable: enum months thisMonth = FEB;
  var declarations can be done when declaring the enum type: 
    enum months { JAN = 1, FEB, MAR } thisMonth, nextMonth;
  you can cast: thisMonth = (enum months) FEB + 1;
  the syntax of enums is borrowed from structs, so structs work similarly

all vars must be declared before use:
  int i;
  char c;
var can be initialized in the decl, with an expression:
  int i = INT_MAX - 1;
  char c = 'a';
non-automatic vars are initialized once, before program starts executing
  the initializer for these can only be a constant-expression
automatic vars are initialized each time the function is called
  the initializer for automatic and `register` vars can be any expression (even function calls)
external (outside functions) and static vars (inside functions) without explicit initializers are initialized to 0 by default
automatic vars (i.e. non-static function vars) and `register` vars without explicit initializers are initialized to undefined (i.e. garbage) by default
  IMPORTANT: initialize automatic vars! otherwise it may contain passwords (from a previous function's stack) etc.
    https://gcc.gnu.org/bugzilla/show_bug.cgi?id=8537
guideline: if it incurs a runtime performance cost, a var is not initialized to 0, but undefined, by default
`const` can be added to any decl
  for an array this means that the elements won't be altered
  parameters can also have const: void foo(const arr[])
  what happens when changing a const var is attempted is _implementation-defined_
arrays can be initialized with an initializer-list
  char foo[] = {'b', 'a', 'r', '\0'}
  if there are less initializers than the array size, the remaining values will be 0
  NOTE: C forbids empty initializer braces; at least one initializer is required
    int arr[10] = {}; // wrong, results in compiler warning; in C++ this would be ok
    int arr[10] = {0}; // ok, initializes all elements to 0

the modulus operator % can only be applied on integers, not floats
using % on negative values results in _machine-dependent_ sign of the result, and using / results truncation towards 0 or away from it; DON'T use these on negative values in C89
  c99 defined truncation to always be towards 0 for negative values
  http://stackoverflow.com/a/29179586
  http://python-history.blogspot.fi/2010/08/why-pythons-integer-division-floors.html
operator precedence table: http://en.cppreference.com/w/c/language/operator_precedence
in C, unary plus won't change a negative value into a positive value
  edit: neither does it in JS or PHP
NOTE: unsigned integer overflow wraps around to 0; signed integer overflow results in undefined behavior

NOTE: in general, the only automatic conversions convert from narrower type to wider type
  exception: float is not converted to double
integral promotion: a char, short or bit-field (all signed or not) or enum, when used in expression expecting int, is converted to signed int, or if signed can't represent all values, unsigned
converting from wide to narrow (i.e. from int to char) is not illegal, but compiler might show a warning
converting between unsigned and signed is machine-dependent, because it depends on the sizes of types. if int is 16 bits and long is 32 bits:
  -1L < 1U // 1U is converted to signed long
    appendix A6.5: "...the effect depends on whether a long int can represent all values of an unsigned int..."
  -1L > 1UL // -1L is converted to unsigned long; its bit pattern makes it look like a large positive int
    appendix A6.5: "if either operation is unsigned long int, the other is converted to unsigned long int"
conversion also happens in function calls, if the parameter type is different than the argument type
NOTE: DON'T mix signed and unsigned types
appendix section A6 lists all conversion rules
when a char is converted to int, it can result in a negative or positive value
  NOTE: char in C is signed or unsigned, depending on implementation
  therefore ALWAYS set char explicitly to signed or unsigned, when a char is used for arbitrary bit patterns (i.e. non-char data, e.g. as a small int)
the conditional operators (||, &&, >, <, etc.) return 0 or 1
casting uses the same conversion rules

bitwise operators can only be used on integer types (signed or unsigned)
^ // exclusive or
~ // one's complement (i.e. inverts all bits)
<< // left-shifting always right-pads with 0
>> // right-shifting always left-pads unsigneds with 0, and either pads signeds with 0 ("logical shift") or with the sign bit ("arithmetic shift") machine-dependently

the operands of an expression with the operators &&, ||, ?: and , are guaranteed to be evaluated left-to-right
the evaluation order for other operands is NOT guaranteed
  therefore this might cause problems: foo(++n, n); // second argument might be n or n+1
  also problematic: a[i] = i++;

each 1-bit represents a power of two:
  0001: 1
  0010: 2
  0100: 4
  1000: 8
in hex (e.g. in printf("%x\n", 8)) a single character represents 4 bits (2^4 = 16)
  4 bits is "a nibble" (half of a byte)
  0x08: 8
  0x0F: 15
  0xFF: 255

C allows a function declaration to omit the argument list (for backwards compatibility), even if the definition has arguments
  int foo();
  int main() { foo( 123, 456 ); }
  int foo( int a ) { printf("%d", a); }
  ^ this compiles without errors. to make the compiler output an error, use `void`: int foo(void);
    therefore all empty argument lists should have `void`Â in the declaration (for compile-time checking)

by default, external variables (i.e. those _defined_ outside of functions) and functions have "external linkage"
  this means that functions even in other .c files (i.e. "compilation units") can access those vars and functions

you cannot declare a new variable in a switch-case statement, because the `case` is only a label
  "error: a label can only be part of a statement and a declaration is not a statement"
  NOTE: C has block scope, so you can create a new scope in the `case` with {}
  http://stackoverflow.com/questions/92396/why-cant-variables-be-declared-in-a-switch-statement
  http://stackoverflow.com/questions/2759371/in-c-do-braces-act-as-a-stack-frame

the scope of an external var (i.e. var declared outside of function) and an external function ("extern" is the default) spans from the point where it is declared to the end of the file
  this is why we need "forward-declaration" to access vars and functions further down in the same file
  NOTE: you need `extern` to _declare_ a variable (but functions are `extern` by default)
    int a; // this is a definition
    extern int a; // this is a declaration
external vars must be defined only once across all files, but can be declared multiple times
  arrays need a size on definition, but not on declaration
an external var can only be initialized in its definition
contrary to `extern`, `static` will limit a var's or function's scope to only the file it's in
`static` in a function makes the var retain its state across calls (works just like in PHP)
  these are initialized only once, when the block is first entered
`register` advises the compiler that the var will be heavily used. compiler might ignore this.
  can only be used in automatic vars and parameters
  you cannot take the address of a `register` var

#defines can span multiple lines, if you put `\` at the end of the line
scope of a #define is from the point of definition to the end of the compiled file
substitutions are only made for full tokens, not if the identifier is part of a longer token, string, or comment:
  #define YES something
  printf("YES") // not substituted
  foo(YESMAN) // not substituted
  foo(YES) // is substituted
  modern C compilers allow unicode in the identifier: http://stackoverflow.com/questions/34319000/what-constitutes-a-valid-c-identifier
any replacement text is allowed:
  #define infinite_loop while (1)
allows for arguments:
  #define max(A, B) ((A) > (B) ? (A) : (B))
  this is dangerous, as the args are evaluated twice, so max(i++, j++) would give non-intuitive results
#defines can be removed with #undef
preceding a parameter name with `#` wraps it with quotes:
  #define printdebug(expr) printf("Debug: " #expr "\n")
  escaping is automatic: in `expr` the " char is replaced with \" and the \ char with \\
## does concatenation of the macro arguments
  #define baz(foo, bar) foo ## bar
  ^ results in `foobar`, because the ## operator replaces whitespace around it
a #define is also expanded inside any following #define
  #define FOO "foo"
  #define FOOBAR FOO "bar"
  printf(FOOBAR);
conditionals:
  #if // this can have any constant integer (not float) expression (but no `sizeof`, casts or enums)
  #elif // as above
  #else
  #endif
  #if defined(name)    is the same as    #ifdef(name)
  #if !defined(name)    is the same as    #ifndef(name)

the `&` operator gives the address of a variable or an array element
  it cannot be used on expressions, constants (i.e. literals like 1000.0L) and `register` vars
the pointer operators & and * have higher precedence than arithmetic operators like +, /,  etc.
  *ptr = *ptr + 1;
  *ptr += 1;
  ++*ptr;   // the unary operators associate right-to-left; that's why postfix increment needs parens...
  (*ptr)++; // ...otherwise this would increment ptr, not the value pointed to by ptr

int arr[10]; // defines a block of 10 _consecutive_ ints
  the size of an array must be a constant expression
  although C99 allows Variable-Length Arrays: https://stackoverflow.com/questions/16672322/malloced-array-vs-variable-length-array
a value or an expression of type array will always decay into a pointer to the first element
these result in the same array element:
  val = arr[2]
  val = *(arr + 2)
  ptr = arr + 4;
  val = *(ptr - 2)
  val = ptr[-2];
the subscript operator can be used with all pointers:
  unsigned i = 256; // binary 00000000 00000000 00000001 00000000
    on a little-endian machine the bytes will be stored from most-significant to least-significant, i.e. 00000000 00000001 00000000 00000000
  unsigned char *cPtr = (unsigned char*) &i; // ptr to the first 8 bits of i
  printf("%i\n", cPtr[1]); // prints 1, because it prints the second byte _in memory_ (on a little-endian machine)
a pointer is a variable, but an array name is not. ptr++ is legal, but arr++ is not.
the integer 0 can be assigned to a pointer, and 0 can be compared with a pointer
  no other integer can be assigned to a pointer
  NULL is defined in <stdio.h>
two pointers can be compared with <, ==, <=, etc.
  but only for pointers pointing to elements of the same array
  NOTE: pointer arithmetic with the address just _past_ the end of the array is legal. this is useful in iterating:
    int arr[3] = {0};
    int *onePastLast = &arr[3];
    for ( int *p = arr; p != onePastLast; p++ ) ;
subtracting two pointers gives the number of elements between them
  an int might not be large enough for the signed value returned by this expression
  NOTE: ptrdiff_t, a signed type defined in <stddef.h>, is large enough to hold the difference
size_t: an unsigned type, that is returned by the sizeof operator
NOTE string mutability: there is a difference between  char str[] = "bla"  and  char *str = "bla"
  the chars in str[] can be mutated, but str can't point to any other string
    str[]  is  {'b','l','a','0'}
  trying to mutate the chars in *str is _undefined_, but str can be changed to point to some other string
    *str ----> {'b','l','a','0'}
    *str points to a string constant, possibly in the program's `.rodata` segment

multi-dimensional array declaration:
  int arr[ROWS][COLS];
the first number of indexes can be ommitted, but not the next ones:
  int arr[][COLS][FLOORS];
  this also applies to arrays as function parameters
initialization is done with nested curly braces:
  int arr[][COLS] = {
    { 1, 2, 3 },
    { 4, 5, 6 }
  };
these are all equivalent:
  func( int arr[2][8] );
  func( int arr[][8] );
  func( int (*arr)[8] ); // parens required because of precedence; otherwise this would be "an array to 8 pointers to int"
NOTE the difference between these:
  int arr[10][20]; // array of 10 arrays to 20 ints
    allocates: 10 * 20 * sizeof(int)
    sizeof( int [10][20] ) == 800
  int *arr[10]; //    array of 10 pointers to int
    allocates: 10 * sizeof(int*)
    sizeof( int *[10] ) == 80
  int (*arr)[20]; //  pointer to array of 20 ints
    allocates: sizeof(int (*)[20]), which is just the size of the pointer, i.e. sizeof(int*)
    sizeof( int (*)[20] ) == 8
NOTE the difference between these:
  char *arr[] = { "aaa", "bbb", "ccc" };    // each elem is 4 chars in size, but they cannot be mutated (see previous section for mutability)
  char arr[][10] = { "aaa", "bbb", "ccc" }; // each elem is 10 chars in size, but they can be mutated
NOTE dereferencing:
  int arr[10][20] = {
    { 1, 2, 3 },
    { 4, 5, 6 }
  };
  int num6 = *(*(arr + 1) + 2);
IMPORTANT: when you use an array name in `sizeof` or take its address with `&`, the whole array object's size is used
  int arr[10];
  sizeof(arr); // returns the total number of bytes in the array, i.e. 10 * sizeof(int)
  arr + 1; // returns pointer to 2nd element, because array decays to pointer to first _element_
  &arr + 1; // returns pointer to space after the _whole_ array; `&` creates a pointer to the whole array, not an element

function pointer variables and parameters look like this:
  int (*func_name)(int, double, void*) // the parens are necessary

structs are called "records" in some languages
`point`, the _structure tag_, is optional here:
  struct point {
    int x;
    int y;
  };
NOTE: `struct` defines a type. therefore it can be followed by a list of var names, just like int, etc.
  struct point {
    int x;
    int y;
  } topLeft, bottomRight;
  struct point midPoint; // another way to define a var
  struct point midPoint = {200, 150}; // initialization; each val must be a constant expression
you use a member with dot-syntax: topLeft.x = 0;
legal operations on structs:
  copying it as a unit (also applies to passing to functions, and returning from them)
  assigning to it as a unit (automatic structures can be initialized with assignment)
  taking its address with &
  accessing its members
  initialization with constant expressions
NOTE: the whole struct is _copied_ when passed to functions, and returned from them, unless a pointer is used
pointers to structures are so common that there is a shorthand for them. these are equivalent:
  (*topLeft).x; // parens are required
  topLeft->x;
struct operators . and ->, and func call and array operators () and [] are at the top of the dependency hierarchy
  game->doFrame();
  world.map[i][j];
  *topLeft->somePtr; // dereferences somePtr
  ++game->frameCount;
array of structs:
  struct point pts[MAXPOINTS];
  struct point pts[] = {
    { 0, 0 },
    { 200, 0 },
    { 200, 100 },
    { 0, 100 }
  };
  // Equivalent; braces not required when initializers are simple vars, and no member's initializer is omitted
  struct point pts[] = {
    0, 0,
    200, 0,
    200, 100,
    0, 100
  };
NOTE: it's illegal to have a struct member of the same type as the parent, but a pointer to one is OK
  struct person { struct person parent; }; // illegal
  struct person { struct person *parent; }; // ok

`sizeof` returns (as size_t) the size of any object as bytes:
  sizeof object
  sizeof(type name) // REMEMBER: this form looks like a type cast
e.g.
  sizeof topLeft
  sizeof(point)
NOTE: sizeof can't be used in an #if, but can be used in a #define
  #define NPOINTS (sizeof pts / sizeof(struct point))
NOTE: the sizeof a struct is not necessarily just the sum of its member types, because alignment might add holes between members

many machines require that some types satisfy alignment restrictions (e.g. ints always at even addresses)
  malloc() takes care of (and guarantees) correct alignment
any pointer can be cast to void* and back again without loss of information
  malloc() returns void*, which must be cast to the desired pointer type

exercise 6-2 can be solved with a recursive descent parser
  a recursive descent parser is a top-down parser (rather than a bottom-up parser)
  gcc and clang use hand-written recursive descent parsers
  https://stackoverflow.com/a/45872887 (especially point 4)
  https://stackoverflow.com/questions/5975741/what-is-the-difference-between-ll-and-lr-parsing
  you can't parse C (and other programming languages) purely with regex, as there are nested structures (parentheses in expressions etc.)
  https://en.wikipedia.org/wiki/The_lexer_hack
  https://web.stanford.edu/class/archive/cs/cs143/cs143.1128/
  http://holub.com/compiler/
  http://blog.reverberate.org/2013/09/ll-and-lr-in-context-why-parsing-tools.html
  https://stackoverflow.com/questions/1044600/difference-between-an-ll-and-recursive-descent-parser
  interesting history about C, B and BCPL: https://www.jslint.com/chistory.html

